name: OFOX Builder

on:
  workflow_dispatch:
    inputs:
      crypto:
        description: "Whether to disable the encryption module, true or false"
        required: false
        default: "false"
      Enable_cache:
        description: "Enable cache, true or false"
        required: true
        default: "true"
env:
  Rec_name: Ofox
  Rec_ver: "12.1"
  Rec_url: https://gitlab.com/OrangeFox/sync.git -b master
  device: surya
  DT_url: https://github.com/brigudav/android_device_xiaomi_surya_twrp.git -b android_12.1
  DT_path: device/xiaomi/surya
  ProductFileHeader: twrp
  target: recoveryimage
  WorkSpace: WorkSpace
  TZ: Australia/Sydney
  Author: ${{github.actor}}
  Delete_old: false

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: "Cleanup Environment"
        uses: rokibhasansagar/slimhub_actions@main

      - name: Initializing environment
        run: |
          echo "::group::Install Build Env Tool"
          sudo -E apt-get clean
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install curl libstdc++6 git wget repo rsync aria2
          echo "::endgroup::"
          git config --global user.name "${{github.actor}}"
          git config --global user.email "alexvl1972@hotmail.com"
          git clone https://gitlab.com/OrangeFox/misc/scripts --depth=1 --single-branch
          cd scripts
          echo "::group::Setup Build Env"
          sudo -E bash setup/android_build_env.sh
          echo "::endgroup::"
          echo "::group::Install Android Sdk"
          sudo -E bash setup/install_android_sdk.sh
          echo "::endgroup::"

      - name: Sync recovery source
        run: |
          mkdir ${{env.WorkSpace}}
          git clone ${{env.Rec_url}} --depth=1 --single-branch
          cd sync
          echo "::group::Orangefox_sync help"
          ./orangefox_sync.sh --help
          echo "::endgroup::"
          echo "::group::Run Orangefox_sync.sh"
          ./orangefox_sync.sh --branch ${{env.Rec_ver}} --path ${{github.workspace}}/${{env.WorkSpace}} --ssh 0
          echo "::endgroup::"

      - name: Sync device tree
        run: |
          cd ${{env.WorkSpace}}
          git clone ${{env.DT_url}} --depth=1 --single-branch ${{env.DT_path}}

      - name: Disable Crypto
        if: (github.event.inputs.crypto == 'true' && github.event.inputs.crypto  != 'false') || contains(github.event.action, 'crypto')
        run: |
          cd ${{env.WorkSpace}}/${{env.DT_path}}
          sed -i 's/TW_INCLUDE_CRYPTO := true/TW_INCLUDE_CRYPTO := false/g' BoardConfig.mk
          sed -i 's/TW_INCLUDE_CRYPTO_FBE := true/TW_INCLUDE_CRYPTO_FBE := false/g' BoardConfig.mk

      - name: Show tree
        run: tree -C -d -L 3

      - name: Restore cache
        uses: actions/cache@v2
        if: (github.event.inputs.Enable_cache == 'true' && github.event.inputs.Enable_cache  != 'false') || contains(github.event.action, 'Enable_cache')
        with:
          path: |
            ~/.ccache
            ${{env.WorkSpace}}/out
          key: ${{runner.os}}-${{env.Rec_name}}-${{env.Rec_ver}}-${{env.device}}
          restore-keys: |
            ${{runner.os}}-${{env.Rec_name}}-${{env.Rec_ver}}-${{env.device}}

      - name: Setup ccache
        uses: alexjurkiewicz/setup-ccache@master
        if: (github.event.inputs.Enable_cache == 'true' && github.event.inputs.Enable_cache  != 'false') || contains(github.event.action, 'Enable_cache')
        with:
          max-size: 5G
          extra-config: |
            keep_comments_cpp = true

      - name: Build ${{env.Rec_name}}
        run: |
          cd ${{env.WorkSpace}}
          echo "::group::Run Envsetup.sh"
          source build/envsetup.sh || true
          echo "::endgroup::"
          echo "::group::Set EnvPath"
          export ALLOW_MISSING_DEPENDENCIES=true
          export FOX_USE_TWRP_RECOVERY_IMAGE_BUILDER=1
          export LC_ALL="C"
          export OF_MAINTAINER="brigudav"
          export FOX_VERSION="Unofficial"
          export OF_SCREEN_H=2400
          export OF_PATCH_AVB20=1
          echo "::endgroup::"
          echo "::group::Lunch ${{env.ProductFileHeader}}_${{env.device}}-eng"
          lunch ${{env.ProductFileHeader}}_${{env.device}}-eng
          echo "::endgroup::"
          echo "::group::Build ${{env.Rec_name}}"
          mka ${{env.Buildtarget}}
          echo "::endgroup::"
        shell: bash

      - name: Get info
        id: info
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y-%m-%d-%H-%M")"
          echo "::set-output name=OutFolder::"${{env.WorkSpace}}/out/target/product/${{env.device}}""
        shell: bash

      - name: Show Space Info
        run: |
          cd ${{steps.info.outputs.OutFolder}}
          sudo rm -rf ${{env.Rec_name}}_for_${{env.device}}_by_${{env.Author}}_*.zip
          sudo zip -r9 ${{env.Rec_name}}_for_${{env.device}}_by_${{env.Author}}_${{github.run_id}}.zip recovery.img
          echo "::group::Out Directory Space"
          du -sh
          echo "::endgroup::"
          echo "::group::Ccache Directory Space"
          du -sh ~/.ccache
          echo "::endgroup::"
          echo "::group::Disk Space"
          df -hlT /
          echo "::endgroup::"
          echo "::group::Out Tree"
          tree -C -L 5 -I "obj*"
          echo "::endgroup::"

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        with:
          name: ${{env.Rec_name}}_for_${{env.device}}-${{github.run_id}}
          path: ${{steps.info.outputs.OutFolder}}/*.img

      - name: Upload Release
        uses: softprops/action-gh-release@master
        with:
          prerelease: true
          files: |
            ${{steps.info.outputs.OutFolder}}/recovery.img
            ${{steps.info.outputs.OutFolder}}/*.zip
          name: ${{env.Rec_name}}-${{env.device}}_${{github.run_id}}
          tag_name: ${{env.device}}-${{env.Rec_name}}-${{steps.info.outputs.date}}
          body: |
            ${{env.Rec_name}}-${{env.Rec_ver}} for ${{env.device}} build at ${{steps.info.outputs.date}}
            Actions:[${{github.run_id}}](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
            Download:[${{env.Rec_name}}_for_${{env.device}}_by_${{env.Author}}_${{github.run_id}}.zip](https://download.fastgit.org/${{github.repository}}/releases/download/${{env.device}}-${{env.Rec_name}}-${{steps.info.outputs.date}}/${{env.Rec_name}}_for_${{env.device}}_by_${{env.Author}}_${{github.run_id}}.zip)
        env:
          GITHUB_TOKEN: ${{secrets.TEST}}
